/*
 * Accounts API
 * Accounts API 
 *
 * OpenAPI spec version: 0.9.5
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.MachineUserOAuth;
import io.swagger.client.model.MachineUserState;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * MachineUserResponseAttributes
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-12-01T06:22:45.936666Z[Etc/UTC]")
public class MachineUserResponseAttributes {
  @SerializedName("name")
  private String name = null;

  @SerializedName("purpose")
  private String purpose = null;

  @SerializedName("state")
  private MachineUserState state = null;

  @SerializedName("oAuth")
  private MachineUserOAuth oAuth = null;

  public MachineUserResponseAttributes name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of Machine User
   * @return name
  **/
  @Schema(example = "Machine User 1", required = true, description = "Name of Machine User")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public MachineUserResponseAttributes purpose(String purpose) {
    this.purpose = purpose;
    return this;
  }

   /**
   * Purpose of this machine user
   * @return purpose
  **/
  @Schema(example = "running automated tests", required = true, description = "Purpose of this machine user")
  public String getPurpose() {
    return purpose;
  }

  public void setPurpose(String purpose) {
    this.purpose = purpose;
  }

  public MachineUserResponseAttributes state(MachineUserState state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @Schema(required = true, description = "")
  public MachineUserState getState() {
    return state;
  }

  public void setState(MachineUserState state) {
    this.state = state;
  }

  public MachineUserResponseAttributes oAuth(MachineUserOAuth oAuth) {
    this.oAuth = oAuth;
    return this;
  }

   /**
   * Get oAuth
   * @return oAuth
  **/
  @Schema(required = true, description = "")
  public MachineUserOAuth getOAuth() {
    return oAuth;
  }

  public void setOAuth(MachineUserOAuth oAuth) {
    this.oAuth = oAuth;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MachineUserResponseAttributes machineUserResponseAttributes = (MachineUserResponseAttributes) o;
    return Objects.equals(this.name, machineUserResponseAttributes.name) &&
        Objects.equals(this.purpose, machineUserResponseAttributes.purpose) &&
        Objects.equals(this.state, machineUserResponseAttributes.state) &&
        Objects.equals(this.oAuth, machineUserResponseAttributes.oAuth);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, purpose, state, oAuth);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MachineUserResponseAttributes {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    purpose: ").append(toIndentedString(purpose)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    oAuth: ").append(toIndentedString(oAuth)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
