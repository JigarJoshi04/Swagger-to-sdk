/**
 * Accounts API
 * Accounts API 
 *
 * OpenAPI spec version: 0.9.5
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.Error
import io.swagger.client.models.InlineResponse200
import io.swagger.client.models.RoleList

import io.swagger.client.infrastructure.*

class CustomerInfoApi(basePath: kotlin.String = "https://api.bpcloud.siemens.com/accounts") : ApiClient(basePath) {

    /**
     * List Partitions for Customer
     * Get the partitions for the specified customer
     * @param customerId Customer ID 
     * @param include include related resources (optional)
     * @return InlineResponse200
     */
    @Suppress("UNCHECKED_CAST")
    fun getPartitions(customerId: kotlin.String, include: kotlin.String? = null): InlineResponse200 {
        val localVariableQuery: MultiValueMap = mapOf("include" to listOf("$include"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/customers/{customerId}/partitions".replace("{" + "customerId" + "}", "$customerId"), query = localVariableQuery
        )
        val response = request<InlineResponse200>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse200
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * List Roles for Customer
     * Get the roles available for specified customer ID
     * @param customerId Customer ID 
     * @param page[cursor] Cursor to fetch next paginated items (optional)
     * @param page[size] Max number of items to return in a page (optional, default to 20)
     * @return RoleList
     */
    @Suppress("UNCHECKED_CAST")
    fun getRoles(customerId: kotlin.String, page[cursor]: kotlin.String? = null, page[size]: kotlin.Int? = null): RoleList {
        val localVariableQuery: MultiValueMap = mapOf("page[cursor]" to listOf("$page[cursor]"), "page[size]" to listOf("$page[size]"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/customers/{customerId}/roles".replace("{" + "customerId" + "}", "$customerId"), query = localVariableQuery
        )
        val response = request<RoleList>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as RoleList
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
