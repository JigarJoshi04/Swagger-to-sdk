# coding: utf-8

"""
    Accounts API

    Accounts API   # noqa: E501

    OpenAPI spec version: 0.9.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MachineUserOAuth(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'str',
        'issuer': 'str',
        'audience': 'str',
        'secret_created': 'str',
        'secret_rotated': 'str'
    }

    attribute_map = {
        'client_id': 'clientId',
        'issuer': 'issuer',
        'audience': 'audience',
        'secret_created': 'secretCreated',
        'secret_rotated': 'secretRotated'
    }

    def __init__(self, client_id=None, issuer=None, audience=None, secret_created=None, secret_rotated=None):  # noqa: E501
        """MachineUserOAuth - a model defined in Swagger"""  # noqa: E501
        self._client_id = None
        self._issuer = None
        self._audience = None
        self._secret_created = None
        self._secret_rotated = None
        self.discriminator = None
        self.client_id = client_id
        self.issuer = issuer
        self.audience = audience
        self.secret_created = secret_created
        self.secret_rotated = secret_rotated

    @property
    def client_id(self):
        """Gets the client_id of this MachineUserOAuth.  # noqa: E501

        ID of client  # noqa: E501

        :return: The client_id of this MachineUserOAuth.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this MachineUserOAuth.

        ID of client  # noqa: E501

        :param client_id: The client_id of this MachineUserOAuth.  # noqa: E501
        :type: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def issuer(self):
        """Gets the issuer of this MachineUserOAuth.  # noqa: E501

        issuer of oAuth  # noqa: E501

        :return: The issuer of this MachineUserOAuth.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this MachineUserOAuth.

        issuer of oAuth  # noqa: E501

        :param issuer: The issuer of this MachineUserOAuth.  # noqa: E501
        :type: str
        """
        if issuer is None:
            raise ValueError("Invalid value for `issuer`, must not be `None`")  # noqa: E501

        self._issuer = issuer

    @property
    def audience(self):
        """Gets the audience of this MachineUserOAuth.  # noqa: E501

        Audience  # noqa: E501

        :return: The audience of this MachineUserOAuth.  # noqa: E501
        :rtype: str
        """
        return self._audience

    @audience.setter
    def audience(self, audience):
        """Sets the audience of this MachineUserOAuth.

        Audience  # noqa: E501

        :param audience: The audience of this MachineUserOAuth.  # noqa: E501
        :type: str
        """
        if audience is None:
            raise ValueError("Invalid value for `audience`, must not be `None`")  # noqa: E501

        self._audience = audience

    @property
    def secret_created(self):
        """Gets the secret_created of this MachineUserOAuth.  # noqa: E501

        Time of secret creation  # noqa: E501

        :return: The secret_created of this MachineUserOAuth.  # noqa: E501
        :rtype: str
        """
        return self._secret_created

    @secret_created.setter
    def secret_created(self, secret_created):
        """Sets the secret_created of this MachineUserOAuth.

        Time of secret creation  # noqa: E501

        :param secret_created: The secret_created of this MachineUserOAuth.  # noqa: E501
        :type: str
        """
        if secret_created is None:
            raise ValueError("Invalid value for `secret_created`, must not be `None`")  # noqa: E501

        self._secret_created = secret_created

    @property
    def secret_rotated(self):
        """Gets the secret_rotated of this MachineUserOAuth.  # noqa: E501

        time of secret rotation  # noqa: E501

        :return: The secret_rotated of this MachineUserOAuth.  # noqa: E501
        :rtype: str
        """
        return self._secret_rotated

    @secret_rotated.setter
    def secret_rotated(self, secret_rotated):
        """Sets the secret_rotated of this MachineUserOAuth.

        time of secret rotation  # noqa: E501

        :param secret_rotated: The secret_rotated of this MachineUserOAuth.  # noqa: E501
        :type: str
        """
        if secret_rotated is None:
            raise ValueError("Invalid value for `secret_rotated`, must not be `None`")  # noqa: E501

        self._secret_rotated = secret_rotated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MachineUserOAuth, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MachineUserOAuth):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
