# coding: utf-8

"""
    Accounts API

    Accounts API   # noqa: E501

    OpenAPI spec version: 0.9.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MachineUserState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current': 'str',
        'since': 'str',
        'action_by': 'str'
    }

    attribute_map = {
        'current': 'current',
        'since': 'since',
        'action_by': 'actionBy'
    }

    def __init__(self, current=None, since=None, action_by=None):  # noqa: E501
        """MachineUserState - a model defined in Swagger"""  # noqa: E501
        self._current = None
        self._since = None
        self._action_by = None
        self.discriminator = None
        self.current = current
        self.since = since
        self.action_by = action_by

    @property
    def current(self):
        """Gets the current of this MachineUserState.  # noqa: E501

        Status of Machine User  # noqa: E501

        :return: The current of this MachineUserState.  # noqa: E501
        :rtype: str
        """
        return self._current

    @current.setter
    def current(self, current):
        """Sets the current of this MachineUserState.

        Status of Machine User  # noqa: E501

        :param current: The current of this MachineUserState.  # noqa: E501
        :type: str
        """
        if current is None:
            raise ValueError("Invalid value for `current`, must not be `None`")  # noqa: E501

        self._current = current

    @property
    def since(self):
        """Gets the since of this MachineUserState.  # noqa: E501

        Status since time  # noqa: E501

        :return: The since of this MachineUserState.  # noqa: E501
        :rtype: str
        """
        return self._since

    @since.setter
    def since(self, since):
        """Sets the since of this MachineUserState.

        Status since time  # noqa: E501

        :param since: The since of this MachineUserState.  # noqa: E501
        :type: str
        """
        if since is None:
            raise ValueError("Invalid value for `since`, must not be `None`")  # noqa: E501

        self._since = since

    @property
    def action_by(self):
        """Gets the action_by of this MachineUserState.  # noqa: E501

        was set to this status by(ID)  # noqa: E501

        :return: The action_by of this MachineUserState.  # noqa: E501
        :rtype: str
        """
        return self._action_by

    @action_by.setter
    def action_by(self, action_by):
        """Sets the action_by of this MachineUserState.

        was set to this status by(ID)  # noqa: E501

        :param action_by: The action_by of this MachineUserState.  # noqa: E501
        :type: str
        """
        if action_by is None:
            raise ValueError("Invalid value for `action_by`, must not be `None`")  # noqa: E501

        self._action_by = action_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MachineUserState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MachineUserState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
