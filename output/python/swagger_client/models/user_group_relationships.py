# coding: utf-8

"""
    Accounts API

    Accounts API   # noqa: E501

    OpenAPI spec version: 0.9.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserGroupRelationships(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'has_access_to': 'PartitionRelationship',
        'authorized_as': 'RoleRelationship',
        'owned_by': 'CustomerRelationship'
    }

    attribute_map = {
        'has_access_to': 'hasAccessTo',
        'authorized_as': 'authorizedAs',
        'owned_by': 'ownedBy'
    }

    def __init__(self, has_access_to=None, authorized_as=None, owned_by=None):  # noqa: E501
        """UserGroupRelationships - a model defined in Swagger"""  # noqa: E501
        self._has_access_to = None
        self._authorized_as = None
        self._owned_by = None
        self.discriminator = None
        if has_access_to is not None:
            self.has_access_to = has_access_to
        if authorized_as is not None:
            self.authorized_as = authorized_as
        if owned_by is not None:
            self.owned_by = owned_by

    @property
    def has_access_to(self):
        """Gets the has_access_to of this UserGroupRelationships.  # noqa: E501


        :return: The has_access_to of this UserGroupRelationships.  # noqa: E501
        :rtype: PartitionRelationship
        """
        return self._has_access_to

    @has_access_to.setter
    def has_access_to(self, has_access_to):
        """Sets the has_access_to of this UserGroupRelationships.


        :param has_access_to: The has_access_to of this UserGroupRelationships.  # noqa: E501
        :type: PartitionRelationship
        """

        self._has_access_to = has_access_to

    @property
    def authorized_as(self):
        """Gets the authorized_as of this UserGroupRelationships.  # noqa: E501


        :return: The authorized_as of this UserGroupRelationships.  # noqa: E501
        :rtype: RoleRelationship
        """
        return self._authorized_as

    @authorized_as.setter
    def authorized_as(self, authorized_as):
        """Sets the authorized_as of this UserGroupRelationships.


        :param authorized_as: The authorized_as of this UserGroupRelationships.  # noqa: E501
        :type: RoleRelationship
        """

        self._authorized_as = authorized_as

    @property
    def owned_by(self):
        """Gets the owned_by of this UserGroupRelationships.  # noqa: E501


        :return: The owned_by of this UserGroupRelationships.  # noqa: E501
        :rtype: CustomerRelationship
        """
        return self._owned_by

    @owned_by.setter
    def owned_by(self, owned_by):
        """Sets the owned_by of this UserGroupRelationships.


        :param owned_by: The owned_by of this UserGroupRelationships.  # noqa: E501
        :type: CustomerRelationship
        """

        self._owned_by = owned_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserGroupRelationships, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserGroupRelationships):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
