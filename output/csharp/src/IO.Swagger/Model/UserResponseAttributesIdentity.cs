/* 
 * Accounts API
 *
 * Accounts API 
 *
 * OpenAPI spec version: 0.9.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// user identity details
    /// </summary>
    [DataContract]
        public partial class UserResponseAttributesIdentity :  IEquatable<UserResponseAttributesIdentity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserResponseAttributesIdentity" /> class.
        /// </summary>
        /// <param name="emailId">email address of the user (required).</param>
        /// <param name="externalId">horizon ID of the user within Siemens ID (required).</param>
        /// <param name="familyName">user&#x27;s family name.</param>
        /// <param name="fullName">user&#x27;s full name.</param>
        /// <param name="givenName">user&#x27;s given name (required).</param>
        public UserResponseAttributesIdentity(string emailId = default(string), string externalId = default(string), string familyName = default(string), string fullName = default(string), string givenName = default(string))
        {
            // to ensure "emailId" is required (not null)
            if (emailId == null)
            {
                throw new InvalidDataException("emailId is a required property for UserResponseAttributesIdentity and cannot be null");
            }
            else
            {
                this.EmailId = emailId;
            }
            // to ensure "externalId" is required (not null)
            if (externalId == null)
            {
                throw new InvalidDataException("externalId is a required property for UserResponseAttributesIdentity and cannot be null");
            }
            else
            {
                this.ExternalId = externalId;
            }
            // to ensure "givenName" is required (not null)
            if (givenName == null)
            {
                throw new InvalidDataException("givenName is a required property for UserResponseAttributesIdentity and cannot be null");
            }
            else
            {
                this.GivenName = givenName;
            }
            this.FamilyName = familyName;
            this.FullName = fullName;
        }
        
        /// <summary>
        /// email address of the user
        /// </summary>
        /// <value>email address of the user</value>
        [DataMember(Name="emailId", EmitDefaultValue=false)]
        public string EmailId { get; set; }

        /// <summary>
        /// horizon ID of the user within Siemens ID
        /// </summary>
        /// <value>horizon ID of the user within Siemens ID</value>
        [DataMember(Name="externalId", EmitDefaultValue=false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// user&#x27;s family name
        /// </summary>
        /// <value>user&#x27;s family name</value>
        [DataMember(Name="familyName", EmitDefaultValue=false)]
        public string FamilyName { get; set; }

        /// <summary>
        /// user&#x27;s full name
        /// </summary>
        /// <value>user&#x27;s full name</value>
        [DataMember(Name="fullName", EmitDefaultValue=false)]
        public string FullName { get; set; }

        /// <summary>
        /// user&#x27;s given name
        /// </summary>
        /// <value>user&#x27;s given name</value>
        [DataMember(Name="givenName", EmitDefaultValue=false)]
        public string GivenName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserResponseAttributesIdentity {\n");
            sb.Append("  EmailId: ").Append(EmailId).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  FamilyName: ").Append(FamilyName).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  GivenName: ").Append(GivenName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserResponseAttributesIdentity);
        }

        /// <summary>
        /// Returns true if UserResponseAttributesIdentity instances are equal
        /// </summary>
        /// <param name="input">Instance of UserResponseAttributesIdentity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserResponseAttributesIdentity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EmailId == input.EmailId ||
                    (this.EmailId != null &&
                    this.EmailId.Equals(input.EmailId))
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.FamilyName == input.FamilyName ||
                    (this.FamilyName != null &&
                    this.FamilyName.Equals(input.FamilyName))
                ) && 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                ) && 
                (
                    this.GivenName == input.GivenName ||
                    (this.GivenName != null &&
                    this.GivenName.Equals(input.GivenName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EmailId != null)
                    hashCode = hashCode * 59 + this.EmailId.GetHashCode();
                if (this.ExternalId != null)
                    hashCode = hashCode * 59 + this.ExternalId.GetHashCode();
                if (this.FamilyName != null)
                    hashCode = hashCode * 59 + this.FamilyName.GetHashCode();
                if (this.FullName != null)
                    hashCode = hashCode * 59 + this.FullName.GetHashCode();
                if (this.GivenName != null)
                    hashCode = hashCode * 59 + this.GivenName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
