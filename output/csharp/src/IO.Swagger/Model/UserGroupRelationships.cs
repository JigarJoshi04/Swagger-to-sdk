/* 
 * Accounts API
 *
 * Accounts API 
 *
 * OpenAPI spec version: 0.9.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// UserGroupRelationships
    /// </summary>
    [DataContract]
        public partial class UserGroupRelationships :  IEquatable<UserGroupRelationships>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserGroupRelationships" /> class.
        /// </summary>
        /// <param name="hasAccessTo">hasAccessTo.</param>
        /// <param name="authorizedAs">authorizedAs.</param>
        /// <param name="ownedBy">ownedBy.</param>
        public UserGroupRelationships(PartitionRelationship hasAccessTo = default(PartitionRelationship), RoleRelationship authorizedAs = default(RoleRelationship), CustomerRelationship ownedBy = default(CustomerRelationship))
        {
            this.HasAccessTo = hasAccessTo;
            this.AuthorizedAs = authorizedAs;
            this.OwnedBy = ownedBy;
        }
        
        /// <summary>
        /// Gets or Sets HasAccessTo
        /// </summary>
        [DataMember(Name="hasAccessTo", EmitDefaultValue=false)]
        public PartitionRelationship HasAccessTo { get; set; }

        /// <summary>
        /// Gets or Sets AuthorizedAs
        /// </summary>
        [DataMember(Name="authorizedAs", EmitDefaultValue=false)]
        public RoleRelationship AuthorizedAs { get; set; }

        /// <summary>
        /// Gets or Sets OwnedBy
        /// </summary>
        [DataMember(Name="ownedBy", EmitDefaultValue=false)]
        public CustomerRelationship OwnedBy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserGroupRelationships {\n");
            sb.Append("  HasAccessTo: ").Append(HasAccessTo).Append("\n");
            sb.Append("  AuthorizedAs: ").Append(AuthorizedAs).Append("\n");
            sb.Append("  OwnedBy: ").Append(OwnedBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserGroupRelationships);
        }

        /// <summary>
        /// Returns true if UserGroupRelationships instances are equal
        /// </summary>
        /// <param name="input">Instance of UserGroupRelationships to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserGroupRelationships input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.HasAccessTo == input.HasAccessTo ||
                    (this.HasAccessTo != null &&
                    this.HasAccessTo.Equals(input.HasAccessTo))
                ) && 
                (
                    this.AuthorizedAs == input.AuthorizedAs ||
                    (this.AuthorizedAs != null &&
                    this.AuthorizedAs.Equals(input.AuthorizedAs))
                ) && 
                (
                    this.OwnedBy == input.OwnedBy ||
                    (this.OwnedBy != null &&
                    this.OwnedBy.Equals(input.OwnedBy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HasAccessTo != null)
                    hashCode = hashCode * 59 + this.HasAccessTo.GetHashCode();
                if (this.AuthorizedAs != null)
                    hashCode = hashCode * 59 + this.AuthorizedAs.GetHashCode();
                if (this.OwnedBy != null)
                    hashCode = hashCode * 59 + this.OwnedBy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
