/* 
 * Accounts API
 *
 * Accounts API 
 *
 * OpenAPI spec version: 0.9.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// MachineUserState
    /// </summary>
    [DataContract]
        public partial class MachineUserState :  IEquatable<MachineUserState>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MachineUserState" /> class.
        /// </summary>
        /// <param name="current">Status of Machine User (required).</param>
        /// <param name="since">Status since time (required).</param>
        /// <param name="actionBy">was set to this status by(ID) (required).</param>
        public MachineUserState(string current = default(string), string since = default(string), string actionBy = default(string))
        {
            // to ensure "current" is required (not null)
            if (current == null)
            {
                throw new InvalidDataException("current is a required property for MachineUserState and cannot be null");
            }
            else
            {
                this.Current = current;
            }
            // to ensure "since" is required (not null)
            if (since == null)
            {
                throw new InvalidDataException("since is a required property for MachineUserState and cannot be null");
            }
            else
            {
                this.Since = since;
            }
            // to ensure "actionBy" is required (not null)
            if (actionBy == null)
            {
                throw new InvalidDataException("actionBy is a required property for MachineUserState and cannot be null");
            }
            else
            {
                this.ActionBy = actionBy;
            }
        }
        
        /// <summary>
        /// Status of Machine User
        /// </summary>
        /// <value>Status of Machine User</value>
        [DataMember(Name="current", EmitDefaultValue=false)]
        public string Current { get; set; }

        /// <summary>
        /// Status since time
        /// </summary>
        /// <value>Status since time</value>
        [DataMember(Name="since", EmitDefaultValue=false)]
        public string Since { get; set; }

        /// <summary>
        /// was set to this status by(ID)
        /// </summary>
        /// <value>was set to this status by(ID)</value>
        [DataMember(Name="actionBy", EmitDefaultValue=false)]
        public string ActionBy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MachineUserState {\n");
            sb.Append("  Current: ").Append(Current).Append("\n");
            sb.Append("  Since: ").Append(Since).Append("\n");
            sb.Append("  ActionBy: ").Append(ActionBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MachineUserState);
        }

        /// <summary>
        /// Returns true if MachineUserState instances are equal
        /// </summary>
        /// <param name="input">Instance of MachineUserState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MachineUserState input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Current == input.Current ||
                    (this.Current != null &&
                    this.Current.Equals(input.Current))
                ) && 
                (
                    this.Since == input.Since ||
                    (this.Since != null &&
                    this.Since.Equals(input.Since))
                ) && 
                (
                    this.ActionBy == input.ActionBy ||
                    (this.ActionBy != null &&
                    this.ActionBy.Equals(input.ActionBy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Current != null)
                    hashCode = hashCode * 59 + this.Current.GetHashCode();
                if (this.Since != null)
                    hashCode = hashCode * 59 + this.Since.GetHashCode();
                if (this.ActionBy != null)
                    hashCode = hashCode * 59 + this.ActionBy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
